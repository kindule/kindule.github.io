<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 :: 只是为了好玩</title>
    <link>http://localhost:1313/database/index.html</link>
    <description>数据库技术以及相关原理研究</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 14 Dec 2024 13:47:02 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mysqlabc02</title>
      <link>http://localhost:1313/database/mysqlabc02/index.html</link>
      <pubDate>Sat, 14 Dec 2024 13:47:02 +0800</pubDate>
      <guid>http://localhost:1313/database/mysqlabc02/index.html</guid>
      <description></description>
    </item>
    <item>
      <title>一条SQL解释MySQL的主从复制原理</title>
      <link>http://localhost:1313/database/mysqlabc01/index.html</link>
      <pubDate>Sat, 14 Dec 2024 13:13:56 +0800</pubDate>
      <guid>http://localhost:1313/database/mysqlabc01/index.html</guid>
      <description>借用一张图，来解释 主备同步的详细过程和一致性保证机制如下：&#xA;主库事务提交流程（两阶段提交） -- 第一阶段：准备阶段 XA PREPARE - 写入redo log（prepare状态） - 记录prepare_lsn -- 第二阶段：提交阶段 XA COMMIT - 写入binlog - 写入redo log（commit状态） 详细执行步骤 a) 主库端：&#xA;事务执行过程中产生redo log（内存中） prepare阶段：将redo log写入磁盘（prepare状态） 写入binlog到磁盘 commit阶段：将redo log状态改为commit 如果开启半同步复制，等待从库确认 返回客户端提交成功 b) 从库端：&#xA;IO线程接收主库binlog 写入relay log 返回接收确认（半同步复制） SQL线程读取relay log 重放SQL语句 记录应用位点和GTID 一致性保证机制 a) 两阶段提交保证：&#xA;-- 主库配置 set global sync_binlog=1; -- 确保binlog即时写入 set global innodb_flush_log_at_trx_commit=1; -- 确保redo log即时写入 b) binlog与redo log关联：&#xA;binlog_log_pos：记录binlog位置 last_committed：记录提交序号 sequence_number：记录序列号 c) GTID保证：</description>
    </item>
  </channel>
</rss>